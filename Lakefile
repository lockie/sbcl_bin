#|-*- mode:lisp -*-|#
(ql:quickload '(:dexador :lake :plump) :silent t)
(ql:quickload '(:cl-ppcre :split-sequence :sn.github) :silent t)
(in-package :cl-user)
(defpackage :lake.user
  (:use :cl :lake :cl-syntax :sn.github.repos.releases)
  (:shadowing-import-from :lake
                          :directory))
(in-package :lake.user)

(use-syntax :interpol)

(defvar *release* "files")
(defvar *user* "roswell")
(defvar *repo* "sbcl-bin-mirror")

(defun release-exist-p (tagname &key owner repo)
  (ignore-errors
    (find tagname
          (releases-list owner repo)
          :key (lambda (x) (getf x :|tag_name|))
          :test 'equal)))

(defun ensure-release-exists (tagname &key owner repo)
  (let ((found (release-exist-p tagname :owner owner :repo repo)))
    (if found
        found
        (releases-create owner repo tagname))))

(defun asset-upload (path tagname &key owner repo force)
  (let ((release-id (getf (release-exist-p tagname :owner owner :repo repo) :|id|))
        (name (file-namestring path)))
    (when force
      (let ((id (getf (find name (releases-assets-list owner repo release-id)
                            :key (lambda (x) (getf x :|name|))
                            :test #'equal) :|id|)))
        (when id 
          (releases-asset-delete owner repo id))))
     
    (releases-asset-upload
     owner repo
     release-id path)))

(defun github (path tagname owner repo &optional force)
  (unless (uiop:getenv "GITHUB_OAUTH_TOKEN")
    (error "GITHUB_OAUTH_TOKEN must be set"))
  (ensure-release-exists tagname :owner owner :repo repo)
  (asset-upload (pathname path) tagname :owner owner :repo repo :force (when force t)))

(task "default" ()
  (sh "mkdir -p scripts")
  (dex:fetch "https://raw.githubusercontent.com/roswell/roswell-bin/master/scripts/up.ros"
             #P"scripts/up.ros" :if-exists :supersede)
  (dex:fetch "http://sbcl.org/platform-table.html" #P"sbcl-bin.html" :if-exists :supersede)
  ;;(sh #?"ros scripts/up.ros github sbcl-bin.html files roswell sbcl-bin-mirror force")
  (sh "cat sbcl-bin.html| grep http|awk -F '\"' '{print $2}'|grep binary > uris")
  (with-open-file (in "uris")
    (loop for uri = (read-line in nil nil)
          while uri
          for path = (file-namestring (quri:uri-path (quri:uri uri)))
          do
             (print uri)
             (dex:fetch uri path :if-exists :supersede)
             (ignore-errors(github path "files" "roswell" "sbcl-bin-mirror"))
             ))
  (let ((path "sbcl-bin.html"))
    (print path)
    (ignore-errors(github path "files" "roswell" "sbcl-bin-mirror"))))
