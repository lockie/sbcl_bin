#|-*- mode:lisp -*-|#
(ql:quickload '(:dexador :lake :plump :cl-ppcre :split-sequence :sn.github) :silent t)

(in-package :cl-user)
(defpackage :lake.user
  (:use :cl :lake :cl-syntax :sn.github.repos.releases)
  (:shadowing-import-from :lake
                          :directory))
(in-package :lake.user)

(use-syntax :interpol)

(defvar *user/repo*
  (last (split-sequence:split-sequence
         #\/
         (string-trim
          (string #\lf)
          (uiop:run-program "git remote -v | head -n 1|awk -F ' ' '{print $2}'" :output :string)))
        2))

(defvar *release* "files")
(defvar *user* (first *user/repo*))
(defvar *repo* (subseq (second *user/repo*) 0 (- (length (second *user/repo*)) 4)))

(defun release-exist-p (tagname &key owner repo)
  (ignore-errors
    (find tagname
          (releases-list owner repo)
          :key (lambda (x) (getf x :|tag_name|))
          :test 'equal)))

(defun ensure-release-exists (tagname &key owner repo)
  (let ((found (release-exist-p tagname :owner owner :repo repo)))
    (if found
        found
        (releases-create owner repo tagname))))

(defun asset-upload (path tagname &key owner repo force)
  (let ((release-id (getf (release-exist-p tagname :owner owner :repo repo) :|id|))
        (name (file-namestring path)))
    (format t "release-id: ~A :name ~A force ~A" release-id name force)
    (force-output)
    (when force
      (let ((id (getf (find name (releases-assets-list owner repo release-id)
                            :key (lambda (x) (getf x :|name|))
                            :test #'equal) :|id|)))
        (format t "id:~A" id)
        (force-output)
        (when id 
          (releases-asset-delete owner repo id))))
    (releases-asset-upload
     owner repo
     release-id path)))

(defun github (path tagname owner repo &optional force)
  (unless (uiop:getenv "GITHUB_OAUTH_TOKEN")
    (error "GITHUB_OAUTH_TOKEN must be set"))
  (ensure-release-exists tagname :owner owner :repo repo)
  (when force
    (format t "upload start:"))
  (asset-upload (pathname path) tagname :owner owner :repo repo :force (when force t))
  (when force
    (format t "upload done")))

(defun output-html (in out)
  (let ((p (plump:parse (pathname in)))
        (uri (format nil "https://github.com/~A/~A/releases/download/" *user* *repo*)))
    (with-open-file (o (pathname out) :direction :output)
      (mapc #'(lambda (x)
                (let ((file (first (last (split-sequence:split-sequence #\/ (plump:get-attribute x "href"))))))
                  (format o "<a href=~S></a>~%" (concatenate 'string uri (second (split-sequence:split-sequence #\- file)) "/" file))))
            (remove-if-not
             #'(lambda (x)
                 (find (first (last (split-sequence:split-sequence #\.(plump:get-attribute x "href"))))
                       '("bz2" "msi") :test 'equal))
             (plump:get-elements-by-tag-name p "a"))))))

(defun get-tags-from-sourceforge ()
  (let ((html (plump:parse (dex:get "https://sourceforge.net/projects/sbcl/files/sbcl/"))))
    (loop for i in (remove-if-not (lambda (x) (equal (string-trim " " (plump:get-attribute x "class")) "folder"))
                                  (plump:get-elements-by-tag-name html "tr"))
          collect `(,(plump:get-attribute i "title")
                    ,(plump:get-attribute (first (plump:get-elements-by-tag-name i "abbr")) "title")))))

(defun commit-tags (tags)
  (dolist (i tags)
    (dolist (x (list
                (format nil "echo ~A> version" (first i))
                (format nil "git add version")
                (format nil "git commit -m 'version ~A on ~A'" (first i) (second i))
                (format nil "git tag -a \"~A\" -m \"~A\"" (first i) (first i))))
      (uiop:run-program x))))

(defun fetch-upload (path uri)
  "fetch&upload"
  (format t "~A " uri)
  (ignore-errors
   (dex:fetch uri path :if-exists :supersede)
   (let ((*release* (second (split-sequence:split-sequence #\- (pathname-name path)))))
     (github path *release* *user* *repo*)))
  (format t "~%")
  (force-output))

(defun mirror-version (version)
  (loop with base-uri = (format nil "https://sourceforge.net/projects/sbcl/files/sbcl/~A/" version)
        with html = (plump:parse (dex:get base-uri))
        with *release* = version
        for i in (remove-if-not (lambda (x) (equal (string-trim " " (plump:get-attribute x "class")) "file"))
                                (plump:get-elements-by-tag-name html "tr"))
        for uri = (concatenate 'string base-uri (plump:get-attribute i "title"))
        for path = (file-namestring (quri:uri-path (quri:uri uri)))
        do (fetch-upload path uri)))

(defun mirror-newest ()
  (dex:fetch "http://sbcl.org/platform-table.html" #P"sbcl-bin.html" :if-exists :supersede)
  (sh "cat sbcl-bin.html| grep http|awk -F '\"' '{print $2}'|grep binary > uris")
  (with-open-file (in "uris")
    (loop for uri = (read-line in nil nil)
          while uri
          for path = (file-namestring (quri:uri-path (quri:uri uri)))
          do (fetch-upload path uri)))
  (let ((path "sbcl-bin.html")
        (out "mirror.html"))
    (format t "~A ~%" (list path *release* *user* *repo* t))
    (force-output)
    (ignore-errors
     (github path *release* *user* *repo* t))
    (output-html path out)
    (ignore-errors
     (github out *release* *user* *repo* t))))

(task "default" ()
  )

(task "mirror" ()
  (let ((ver (or (ros:getenv "VERSION")
                 (unless (zerop (length (ros:getenv "TRAVIS_TAG")))
                   (ros:getenv "TRAVIS_TAG")))))
    (format t "mirror ~A~%" ver)
    (force-output)
    (if ver
        (progn
          (mirror-version ver))
        (mirror-newest))))
