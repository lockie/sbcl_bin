#|-*- mode:lisp -*-|#
(load "roswell.github.utils.asd")
(ql:quickload :roswell.github.utils :silent nil)
(ros:include "util")

(in-package :cl-user)
(defpackage :lake.user
  (:use :cl :lake :cl-syntax :roswell.github.utils)
  (:shadowing-import-from :lake
                          :directory))
(in-package :lake.user)

(use-syntax :interpol)

(defvar *ci-supported*
  '("x86-64-linux-binary.tar.bz2"
    "x86-linux-binary.tar.bz2"
    "x86-64-darwin-binary.tar.bz2"
    "x86-darwin-binary.tar.bz2"
    "arm64-linux-binary.tar.bz2"))

(defun output-html (in out &optional version)
  (let ((p (plump:parse (pathname in)))
        (uri (format nil "https://github.com/~A/~A/releases/download/" *user* *repo*)))
    (with-open-file (o (pathname out) :direction :output)
      (when version
        (let ((tmp (format nil "~A~A/sbcl-~A-" uri version version)))
          (mapc
           (lambda (x)
             (format o "<a href=~S></a>~%" (format nil "~A~A" tmp x)))
           *ci-supported*)))
      (mapc #'(lambda (x)
                (let ((file (first (last (split-sequence:split-sequence #\/ (plump:get-attribute x "href"))))))
                  (format o "<a href=~S></a>~%" (concatenate 'string uri (second (split-sequence:split-sequence #\- file)) "/" file))))
            (remove-if-not
             #'(lambda (x)
                 (find (first (last (split-sequence:split-sequence #\.(plump:get-attribute x "href"))))
                       '("bz2" "msi") :test 'equal))
             (plump:get-elements-by-tag-name p "a"))))))

(defun mirror-version (version)
  (loop with releases = (releases-list *user* *repo*)
        with base-uri = (format nil "https://sourceforge.net/projects/sbcl/files/sbcl/~A/" version)
        with html = (progn (format t "get ~A~%" base-uri) (finish-output) (plump:parse (dex:get base-uri)))
        with *release* = version
        for i in (remove-if-not (lambda (x) (equal (string-trim " " (plump:get-attribute x "class")) "file"))
                                (plump:get-elements-by-tag-name html "tr"))
        for uri = (concatenate 'string base-uri (plump:get-attribute i "title"))
        for path = (file-namestring (quri:uri-path (quri:uri uri)))
        do (if (or (find-if (lambda (x) (equal path (format nil "sbcl-~A-~A" version x)))
                            *ci-supported*)
                   (find path (getf (find *release*
                                          releases
                                          :key (lambda (x) (getf x :|tag_name|))
                                          :test 'equal) :|assets|)
                         :key (lambda (x) (getf x :|name|))
                         :test #'equal))
               (format t "skip ~A~%" uri)
               (fetch-upload path uri (second (split-sequence:split-sequence #\- (pathname-name path)))))))

(defun mirror-newest ()
  (format t "mirror-newest~%")(force-output)
  (dex:fetch "http://sbcl.org/platform-table.html" #P"sbcl-bin.html" :if-exists :supersede)
  (sh "cat sbcl-bin.html| grep http|awk -F '\"' '{print $2}'|grep binary > uris")
  (format t "fetching uris~%")(force-output)
  (with-open-file (in "uris")
    (loop with releases = (progn
                            (format t "fetching releases-list ~A ~A" *user* *repo*)(force-output)
                            (prog1 (releases-list *user* *repo*)
                              (format t "done~%")(force-output)))
          for uri = (read-line in nil nil)
          while uri
          for path = (file-namestring (quri:uri-path (quri:uri uri)))
          for *release* = (second (split-sequence:split-sequence #\- (pathname-name path)))
          do (format t "~%~a " uri)
             (force-output)
             (if (find path (getf (find *release*
                                        releases
                                        :key (lambda (x) (getf x :|tag_name|))
                                        :test 'equal) :|assets|)
                       :key (lambda (x) (getf x :|name|))
                       :test #'equal)
                 (format t "skip")
                 (fetch-upload path uri (second (split-sequence:split-sequence #\- (pathname-name path)))))
             (force-output)))
  (let ((path "sbcl-bin.html")
        (out "mirror.html"))
    (format t "~A ~%" (list path *release* *user* *repo* t))
    (force-output)
    (ignore-errors
     (github path *release* *user* *repo* t))
    (output-html path out)
    (ignore-errors
     (github out *release* *user* *repo* t))))

(defun git-clone (uris version release)
  (format nil "~{~A~^ || ~}"
          (mapcar (lambda (uri)
                    (format nil "git clone ~:[--depth 5 ~;~:]~A --branch=~:[master~;sbcl-~:*~A~]"
                            (and version (not release))
                            uri
                            (and release version)))
                  uris)))

(defun build-sbcl-bin (version uname-m)
  (let ((release-dir (namestring (uiop:getcwd)))
        (uname (roswell.util:uname))
        (release (and version (< (length version) 20)))) ;; sha length is 40,version length is about 10.20 is enough.
    (sh "rm -rf sbcl")
    (sh (git-clone '("https://git.code.sf.net/p/sbcl/sbcl"
                     "https://github.com/sbcl/sbcl") version release))
    (uiop:chdir "sbcl")
    (when (and version (not release))
      (sh (format nil "git checkout ~A" version)))
    (sh "rm -rf .git")
    (sh (format nil "echo '~S' > version.lisp-expr" (if release version "99.99.99")))
    (dolist (file (append
                   (and (find version '("1.3.15" "1.3.16") :test 'equal) (find :darwin *features*) (equal uname-m "x86-64")
                        '("darwin-1.3.15-16"))
                   (and (find :win32 *features*)
                        '(;;"win32-posixwait"  applicable until 1.4.12
                          ))))
      (sh (format nil "cat ../patch/~A|patch -p0 -N" file)))
    (ignore-errors
      (sh (format nil "bash make.sh --with-sb-core-compression --arch=~A '--xc-host=ros -L sbcl-bin --no-rc run'"
                  uname-m)))
    (sh "bash run-sbcl.sh --eval '(progn (print *features*)(quit))'")
    (uiop:chdir release-dir)
    (sh (format nil "ln -s sbcl ~Asbcl-~A-~A-~A"
                release-dir
                version
                uname-m
                uname))
    (sh (format nil "sbcl/binary-distribution.sh sbcl-~A-~A-~A"
                version
                uname-m
                uname))
    (let ((path (format nil "sbcl-~A-~A-~A-binary.tar"
                        version
                        uname-m
                        uname)))
      (sh (format nil "rm -f ~A.bz2" path))
      (sh (format nil "bzip2 ~A" path)))))

(defun env (name)
  (let ((val (ros:getenv name)))
    (unless (zerop (length val))
      val)))

(defun version-target ()
  (values (or (env "TRAVIS_TAG")
              (env "APPVEYOR_REPO_TAG_NAME")
              (env "VERSION")
              (let ((branch (env "TRAVIS_BRANCH")))
                (unless (equal "master" branch)
                  branch)))
          (or (env "TARGET")
              (roswell.util:uname-m))))

(defun upload-archive ()
  (multiple-value-bind (version uname-m) (version-target)
    (let* ((uname (roswell.util:uname))
           (release (and version (< (length version) 20)))
           (path (format nil "sbcl-~A-~A-~A-binary.tar"
                         version
                         uname-m
                         uname)))
      (when release
        (ql:quickload :sb-md5)
        (let ((bz2 (format nil "~A.bz2" path)))
          (format t "~(~{~2,'0X~}~)"
                  (map 'list #'identity (funcall (read-from-string "sb-md5:md5sum-file") bz2)))
          (loop repeat 10
                until (ignore-errors
                        (github bz2 version *user* *repo* t))
                do (sleep 3)))))))

(task "default" ()
  (multiple-value-bind (ver m) (version-target)
    (format t "~A ~A~%" ver m)
    (force-output)
    (build-sbcl-bin ver m)))

(task "upload" ()
  (upload-archive))

(task "mirror" ()
  (let ((ver (version-target)))
    (if ver
        (and (< (length ver) 20)
             (mirror-version ver))
        (mirror-newest))))

(task "upload-build-list" ()
  (multiple-value-bind (ver) (version-target)
    (when (and (not (zerop (length ver)))
               (< (length ver) 20))
      (let ((path "sbcl-bin.html")
            (out "build.html"))
        (dex:fetch "http://sbcl.org/platform-table.html"
                   #P"sbcl-bin.html" :if-exists :supersede)
        (format t "~A ~%" (list path *release* *user* *repo* t))
        (force-output)
        (output-html path out ver)
        (ignore-errors
         (github out *release* *user* *repo* t))))))
